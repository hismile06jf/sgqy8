//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;
public class EffectUtility
{
	public enum FxPlayState
	{
		Loading,
		Begin,
		End,
	}

	public delegate void OnFxPlayCallBack(FxPlayParam param);
	public class FxPlayParam
	{
		public string fileName;
		public float lifeTime;
		public GameObject objFx;
		public FxPlayState state;
		public Vector3 vOffsetPos;
		public Transform transTarget;
		public object userParam;
		public OnFxPlayCallBack callBack;

		public FxPlayParam(string fxPath, float time, Transform target, Vector3 offset, object param, OnFxPlayCallBack cb)
		{
			fileName = fxPath;
			lifeTime = time;
			state = FxPlayState.Loading;
			vOffsetPos = offset;
			transTarget = target;
			userParam = param;
			callBack = cb;
		}

		public void DispatchState(FxPlayState state)
		{
			this.state = state;
			if(null != callBack)
			{
				callBack(this);
			}
		}
	}

	//
	static LinkedList<FxPlayParam> listLoading = new LinkedList<FxPlayParam>();

	/// <summary>
	/// Plaies the effect.
	/// </summary>
	static public void PlayEffect(string fxPath, float time, Transform parent)
	{
		FxPlayParam param = new FxPlayParam(fxPath, time, parent, Vector3.zero, null, null);

	}

	/// <summary>
	/// Plaies the effect.
	/// </summary>
	static public void PlayEffect(string fxPath, float time, Transform parent, Vector3 vOffset)
	{
		FxPlayParam param = new FxPlayParam(fxPath, time, parent, vOffset, null, null);
		
	}

	/// <summary>
	/// Plaies the effect.
	/// </summary>
	static public void PlayEffect(string fxPath, float time, Transform parent, object userParam, OnFxPlayCallBack cb)
	{
		FxPlayParam param = new FxPlayParam(fxPath, time, parent, Vector3.zero, userParam, cb);
	}

	/// <summary>
	/// Plaies the effect.
	/// </summary>
	static public void PlayEffect(string fxPath, float time, Transform parent, Vector3 vOffset, object userParam, OnFxPlayCallBack cb)
	{
		FxPlayParam param = new FxPlayParam(fxPath, time, parent, vOffset, userParam, cb);
	}

	/// <summary>
	/// Raises the play new effect event.
	/// </summary>
	static void OnPlayNewEffect(FxPlayParam param)
	{
		if(null == param) return;

		listLoading.AddLast(param);
		param.DispatchState(FxPlayState.Loading);
		EffectMgr.Instance.LoadEffect(param.fileName, OnEffectLoadCallBack, null, param);
	}

	static void RemoveEffect(FxPlayParam param)
	{
		if(null == param) return;
		listLoading.Remove(param);
		EffectMgr.Instance.UnLoadEffect(param.fileName);
	}

	static void OnEffectLoadCallBack(string fxPath, GameObject objFx, object userParam)
	{
		FxPlayParam fx = (FxPlayParam)userParam;
		if(null == fx) return;

		fx.objFx = objFx;

		fx.DispatchState(FxPlayState.Begin);
		if(null == objFx)
		{
			fx.DispatchState(FxPlayState.End);
			RemoveEffect(fx);
			return;
		}

		objFx.transform.parent = fx.transTarget;
		objFx.transform.localPosition = fx.vOffsetPos;
		objFx.transform.localRotation = Quaternion.identity;
		objFx.transform.localScale = Vector3.one;

		ParticleSystem[] cm = objFx.GetComponents<ParticleSystem>();
		ParticleSystem[] child = objFx.GetComponentsInChildren<ParticleSystem>();
		foreach(ParticleSystem p in cm)
		{
			p.Play();
		}
		foreach(ParticleSystem p in child)
		{
			p.Play();
		}

		TimeMgr.Instance.Exec(OnEffectPlayFinished, fx, (int)(fx.lifeTime * 1000f));
	}

	static void OnEffectPlayFinished(object param)
	{
		FxPlayParam fx = (FxPlayParam)param;
		if(null == fx) return;

		fx.DispatchState(FxPlayState.End);
		RemoveEffect(fx);
	}

}